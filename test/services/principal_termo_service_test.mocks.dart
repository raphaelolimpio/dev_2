// Mocks generated by Mockito 5.4.6 from annotations
// in dev/test/services/principal_termo_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:dev/models/termo.dart' as _i4;
import 'package:dev/repositories/termo_repository.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [TermoRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTermoRepository extends _i1.Mock implements _i2.TermoRepository {
  MockTermoRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<Map<String, List<_i4.Termo>>> findAll() =>
      (super.noSuchMethod(
            Invocation.method(#findAll, []),
            returnValue: _i3.Future<Map<String, List<_i4.Termo>>>.value(
              <String, List<_i4.Termo>>{},
            ),
          )
          as _i3.Future<Map<String, List<_i4.Termo>>>);

  @override
  _i3.Future<_i4.Termo?> findByTemaAndNome(String? tema, String? nomeTermo) =>
      (super.noSuchMethod(
            Invocation.method(#findByTemaAndNome, [tema, nomeTermo]),
            returnValue: _i3.Future<_i4.Termo?>.value(),
          )
          as _i3.Future<_i4.Termo?>);

  @override
  _i3.Future<bool> save(String? tema, _i4.Termo? termo) =>
      (super.noSuchMethod(
            Invocation.method(#save, [tema, termo]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<bool> deleteByTemaAndNome(String? tema, String? nomeTermo) =>
      (super.noSuchMethod(
            Invocation.method(#deleteByTemaAndNome, [tema, nomeTermo]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<List<String>> listThemes() =>
      (super.noSuchMethod(
            Invocation.method(#listThemes, []),
            returnValue: _i3.Future<List<String>>.value(<String>[]),
          )
          as _i3.Future<List<String>>);

  @override
  _i3.Future<List<_i4.Termo>> listAllTermosFlat() =>
      (super.noSuchMethod(
            Invocation.method(#listAllTermosFlat, []),
            returnValue: _i3.Future<List<_i4.Termo>>.value(<_i4.Termo>[]),
          )
          as _i3.Future<List<_i4.Termo>>);
}
